#summary Building pygr and running the tests

To run the tests, 'cd tests && python runtest.py -b'; omit _-b_ to use in-place code instead of the build directory. runtest will fail out if it cannot import pygr from within the working directory, to avoid running the tests on the installed version.

== Overview ==

Generally speaking, the following steps must be taken to build and install Pygr on your machine:

 # Install Python
 # _(for Git sources only)_Install Pyrex
 # Install a C compiler and other development files
 # _(optional)_ Install modules providing MySQL/SQLite support
 # _(optional)_ Install BLAST tools
 # Build/install Pygr
 # Test your build


=== Installing Python ===

This should be pretty straightforward. For ready-to-use binaries look to either your system's package repository (Linux, BSD, Fink, Cygwin, ...) or installers provided [http://www.python.org/download/ at Python.org] (Windows, Mac OS X). If all else fails, you can always try building Python from source.

Pygr should work correctly with any version of Python between 2.3 and 2.6, inclusive. Python 3.0 is *not* supported and no conversion has been planned yet, primarily because even its latest version (3.0.1) exhibits [http://mail.python.org/pipermail/python-dev/2009-January/085590.html visibly worse I/O performance] than the 2.x branch.


=== Installing Pyrex ===

Pygr extension code is written in [http://www.cosc.canterbury.ac.nz/greg.ewing/python/Pyrex/ Pyrex] rather than plain C, making it necessary to have Pyrex code translated into C before the compiler can do its job. *Official Pygr packages come with pre-build C files* so if you want to install one of these, you may *skip this step*. Conversely, you will need Pyrex installed to build Pygr using the code from our Git repository.

Pyrex hasn't been officially declared finished yet, which means two things to Pygr users: one is that you'll want the latest available version (as of now, 0.9.8.5) in order to avoid bugs, the other is that unless your system's software repositories contain new-enough Pyrex packages (many do - look for _pyrex_ or _python-pyrex_), you'll need to build the module by hand. Fortunately the latter is very easy:
 * download and unpack the archive;
 * launch a command-line interpreter and enter the newly-created directory;
 * run _python setup.py install_, possibly adding the option _-O_ if you want optimised files to be installed too. You may need to be more specific than saying just _python_ if multiple versions are present and/or the main executable is not in the path. Last but not least, _install_ copies files into sytem-wide Python directories so superuser privileges (or at least write access) might be needed to run it, in particular under Linux/Unix.

In case of Pygr Pyrex is only required at build time, it can safely be removed afterwards.


=== The C Compiler etc. ===

Pygr is not a pure-Python module and a C compiler, along with possible assistant tools, must be present at build time for it to finish successfully. You will also need Python's header files. How all these should be obtained depends a lot on the system you use:

 * if you built Python from source, you should already have everything;

 * if under Linux/Unix/Fink/Cygwin/..., Python's header files may be distributed separately from its executables and other run-time files. Look for something similar to _python-devel_ in your package manager; installing it should automatically pull in all dependencies. As for the compiler, you will most likely use GCC - almost certainly available in your system's package repositories, if not already on your hard drive;

 * under Windows, your Python installation should come with all the required header files but things are more complicated when it comes to the compiler. There are two options available here, they will be discussed in more details later:
  * use Microsoft Visual Studio and the official Microsoft Platform SDK; or
  * use [http://www.mingw.org/ MinGW], port of GCC and friends to Windows bundled with freely-distributable standard header files and import libraries.

Like Pyrex, both the compiler and the header files are build-time dependencies only. They can safely be removed afterwards.


=== MySQL/SQLite Support ===

The following Python modules must be present in your system in order for Pygr to support accessing MySQL and SQLite databases:

 * SQLite - _sqlite3_ (part of the standard library) for Python 2.5 and newer, _pysqlite2_ ([http://pysqlite.org/ pysqlite-2.x.y]) for older versions;

 * MySQL - _MySQLdb_ (from the [http://sourceforge.net/projects/mysql-python MySQL-python] package).

Both are fairly common in package repositories, and if all else fails they can be built from the source the same way as Pyrex (then again, note that building mysql-python is more complicated than most Python modules, especially under Windows - it will be discussed later).

Note that Pygr only checks for SQL-related modules at run time - they needn't be present at the time of installation.


=== BLAST Support ===

Pygr uses standard command-line BLAST tools to provide BLAST support. To have this work:

 * [http://www.ncbi.nlm.nih.gov/BLAST/download.shtml Download the tools];

 * Unpack them somewhere;

 * Add the _bin_ subdirectory of wherever you unpacked the tools to to the search path.

Just like with SQL modules, Pygr only looks for BLAST tools at run time.


=== Building and Installing Pygr ===

If you want your Pygr installation to be system-wide, the procedure is exactly the same as for Pyrex - obtain the sources, enter the directory and run _python setup.py install_ (possibly with _-O_). If however your installation is only to be local, you've got two options:

 * run _python setup.py build_. This will prepare a local directory containing a clean and complete build of Pygr but stop short of copying its contents to a system-wide location; you can then copy these contents by hand to wherever you want them to be and as long as you specify this directory in _sys.path_, Python will be able to find Pygr - and other modules which may be installed in it - there. You will find this build in the system-dependent directory *build/lib._OS_-_ARCH_-_PV_*, _e.g._ _build/lib.linux-x86_64-2.5_. After you're done, the Pygr sources can safely be deleted;

 * run _python setup.py build_ext -i_. This will perform a so-called in-place build, _i.e._ build C extensions of Pygr _in the source directory_. This approach is obviously not recommended for long-term use (one needs to keep the sources around, conflicts can arise between different Python versions, _etc._) but facilitates having a quick look at Pygr - in particular, if you launch your Python interpreter or script from the directory containing _setup.py_, in-place Pygr code should be imported automatically _i.e._ without having to set _sys.path_.


=== Testing Your Build ===

Source packages of Pygr come with a test suite which allows one to verify that your build runs correctly. To run then, cd to the subdirectory _tests_ and run _python runtest.py -b_ if you ran _build_ or _install_ earlier, or _python runtest.py_ if you created an in-place build.

Note that the test suite will abort if it cannot find appropriate files locally, _i.e._ in either the _build_ subdirectory or in place - even if the very same version of Pygr is already present in Python path. This happens by design to avoid version mismatches between Pygr and the test suite.

Running the tests will display some information pertaining to their progress, followed by a summary. If everything is right, all tests should pass. Depending of what optional components are present in your system you may observe some test suites having been skipped.


== Building under Windows ==

While the build procedure itself is the same under Windows as under other systems, the former demands more attention because of the multitude of possible build set-ups - at present, Python extensions can be build in any of the following ways:
 * under Cygwin
 * natively, using Microsoft Visual C++
 * natively, using MinGW

=== Cygwin ===

Possibly the best choice for users with Unix background, as the POSIX environment provided by Cygwin is very similar (up to and including familiar shells) to what is offered by Linux/Unix systems - making it unnecessary to deal with the native command-line interface of Windows and all its quirks. The fact the environment is based entirely on Open Source software may be important to some as well. Last but not least, Cygwin comes with a package manager which makes it a breeze to install (almost) all the software needed to build and run Pygr.

The primary (yet hardly major) disadvantage of Cygwin is that it must of course be installed everywhere you want to run Cygwin applications. Moreover, applications built under it do not necessarily work when called "from the outside". This leaves us with only one issue - getting Python-MySQL to work under Cygwin is at present a bit of a bother.


==== Details ====

Make sure the following packages are installed, along with whatever they pull in:
 * always: _gcc_, _python_;
 * for Git versions: _python-pyrex_;
 * for SQLite support: _libsqlite3_0_ (note: this is required even for Python 2.5 and newer - even then it isn't automatically pulled in by the _python_ package), _libsqlite3-devel_ (Python older than 2.5 only).
Follow the standard building procedure. Build the _pysqlite2_ module by hand if you want SQLite support under Python versions older than 2.5.

The problem with MySQL under Cygwin is that there are presently no Cygwin packages of MySQL. Rumour has it it is possible to link Python-MySQL against a native Windows installation of the MySQL client, then again since the procedure involves some serious cross-platform voodoo it is generally easier to build the MySQL client from sources. While doing this, keep the following in mind:
 * make sure you pass _--without-server_ (or similar, different versions used different options) to _configure_ - building the server is not necessary and usually fails anyway;
 * depending on the version of MySQL and/or Cygwin packages, the compiler may complain about missing header files not present anywhere in the Cygwin repository. For example, MySQL-5.1.33 built on an up-to-date Cygwin installation in April 2009 couldn't find _sys/ttydefaults.h_. In many cases this can be worked around by locating such files on any relatively modern Linux box and copying them into the MySQL source tree.


=== Microsoft Visual C++ ===

Since all official Python distributions so far have been built using different versions of Visual C++, it is the de-facto standard way - and, for now anyway, the *only* stable way in case of 64-bit builds - of building Python extensions for this operating system. That said, there is an important issue to keep in mind regarding this approach: due to limitations of Visual C++, extensions must be built with *exactly the same* version of the compiler as your Python distribution! In case of official distributions from Python.org, these are:
  * 2.3 - 6
  * 2.4/2.5 - 2003
  * 2.6 - 2008
The fact old versions of Microsoft software may be difficult and/or expensive to obtain aside, this makes it more-or-less impossible to perform builds for different Python version under a single instance of the operating system.

The easiest way of obtaining Visual C++ is to find (download from microsoft.com if it's the latest edition, elsewhere - e.g. on CDs attached to programming books at a library - if not) and install Microsoft Visual Studio Express Edition - it's free and takes up _much_ less disc space than the full-blown edition. Unfortunately the earliest Express-Edition version of Visual Studio was 2005, meaning this option is not viable for any official Python builds older than 2.6. Note that in case of VS 2003 there is an alternative to spending time and money on hunting down a copy - in 2004 Microsoft made available free of charge _Visual C++ Toolkit 2003_, a full version of Visual C++ 2003 optimizing compiler. This will give you no GUI or anything fancy, just the compiler, but it is enough to build Pygr. The Toolkit is no longer available on microsoft.com but can quite easily be found elsewhere on the Web. Once you've got a copy, follow [http://www.vrplumber.com/programming/mstoolkit/ these instructions] to set everything up.


==== Details ====

Building Pygr with Visual C++ should work out of the box as long as all of its dependencies have been met.

You may need an appropriate Windows installation disc when installing Visual Studio, as some versions (confirmed with VS2003 Professional) require the IIS server and its FrontPage extensions, both of them standard but optional (and not recommended for keeping around unless absolutely needed) Windows components, to be present before installation can even begin. Yes, even if you are about NOT to choose anything but C++-related bits in the installer! Fortunately they can be safely removed after installation. 

If installing an older version of Visual Studio, don't bother telling it to look for updates as the final step of installation - it will likely not find them, even if they're still on microsoft.com. Just finish installation, then download and run update installers (_e.g._ Visual Studio 2003 Service Pack 1) by hand. At this point it should be safe to click the Exit button without rolling back the installation.


=== MinGW ===

TBA

 * *Pros*: only free tools needed, can be used to build for any Python version
 * *Cons*: doesn't quite work with Pygr yet (see below)!