#summary Building pygr and running the tests

(Short notes for now -- CTB)

{{{
python setup.py build
}}}

makes an arch-specific directory in build, e.g. build/lib.linux-i686-2.5, that must then be put in sys.path.

Alternatively,

{{{
python setup.py build_ext -i
}}}

builds the pygr extensions "in place" so that you can 'import pygr' in the top-level working
directory.

To run the tests, 'cd tests && python runtest.py -b'; omit _-b_ to use in-place code instead of the build directory. runtest will fail out if it cannot import pygr from within the working directory, to avoid running the tests on the installed version.

== Building under Windows ==

While the build procedure itself is the same under Windows as under other systems, the former demands more attention because of the multitude of possible build set-ups. At present, Python extensions can be build in any of the following ways:

 # Under Cygwin
  * *Pros*: offers a full POSIX environment, only free tools needed, almost all dependencies can be installed using the package manager
  * *Cons*: requires Cygwin (for both building and running) of course, MySQL client must be built from the source
 # Natively, with the Microsoft Visual C++ compiler
  * *Pros*: binary packages built this way should work without problems with any official Python release out there (but see below)
  * *Cons*: non-free tools may be needed, different Python versions need different compiler versions, demanding resource-wise
 # Natively, with the MinGW compiler
  * *Pros*: only free tools needed, can be used to build for any Python version
  * *Cons*: doesn't quite work with Pygr yet (see below)!

Below you will find notes pertaining to each of these options.

(Note to self: complete this --MS)

Cygwin: usual POSIX build env; for MySQL support, build client from sources

Native Win32: appropriate version of Visual Studio (2.3 - 6, 2.4/2.5 - 2003, 2.6 - 2008), ...