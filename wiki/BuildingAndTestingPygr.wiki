#summary Building pygr and running the tests

(Short notes for now -- CTB)

{{{
python setup.py build
}}}

makes an arch-specific directory in build, e.g. build/lib.linux-i686-2.5, that must then be put in sys.path.

Alternatively,

{{{
python setup.py build_ext -i
}}}

builds the pygr extensions "in place" so that you can 'import pygr' in the top-level working
directory.

To run the tests, 'cd tests && python runtest.py -b'; omit _-b_ to use in-place code instead of the build directory. runtest will fail out if it cannot import pygr from within the working directory, to avoid running the tests on the installed version.

== Overview ==

Generally speaking, the following steps must be taken to build and install Pygr on your machine:

 # Install Python
 # Install Pyrex
 # Install a C compiler and other development files
 # _(optional)_ Install modules providing MySQL/SQLite support
 # _(optional)_ Install BLAST tools
 # Build/install Pygr
 # Test your build


=== Installing Python ===

This should be pretty straightforward. For ready-to-use binaries look to either your system's package repository (Linux, BSD, Fink, Cygwin, ...) or installers provided [http://www.python.org/download/ at Python.org] (Windows, Mac OS X). If all else fails, you can always try building Python from source.

Pygr should work correctly with any version of Python between 2.3 and 2.6, inclusive. Python 3.0 is *not* supported and no conversion has been planned yet, primarily because even its latest version (3.0.1) exhibits [http://mail.python.org/pipermail/python-dev/2009-January/085590.html visibly worse I/O performance] than the 2.x branch.


=== Installing Pyrex ===

Pygr extension code is written in [http://www.cosc.canterbury.ac.nz/greg.ewing/python/Pyrex/ Pyrex] rather than plain C, thus making it necessary for Pyrex to be present at build time.

Pyrex hasn't been officially declared finished yet, which means two things to Pygr users: one is that you'll want the latest available version (as of now, 0.9.8.5) in order to avoid bugs, the other is that you'll need to build the module by hand. Fortunately the latter is very easy:
 * download and unpack the archive;
 * launch a command-line interpreter and enter the newly-created directory;
 * run _python setup.py install_, possibly adding the option _-O_ if you want optimised files to be installed too. You may need to be more specific than saying just _python_ if multiple versions are present and/or the main executable is not in the path.

In case of Pygr Pyrex is only required at build time, it can safely be removed afterwards.


=== The C Compiler etc. ===

Pygr is not a pure-Python module and a C compiler, along with possible assistant tools, must be present at build time for it to finish successfully. You will also need Python's header files. How all these should be obtained depends a lot on the system you use:

 * if you built Python from source, you should already have everything;

 * if under Linux/Unix/Fink/Cygwin/..., Python's header files may be distributed separately from its executables and other run-time files. Look for something similar to _python-devel_ in your package manager; installing it should automatically pull in all dependencies. As for the compiler, you will most likely use GCC - almost certainly available in your system's package repositories, if not already on your hard drive;

 * under Windows, your Python installation should come with all the required header files but things are more complicated when it comes to the compiler. There are two options available here, they will be discussed in more details later:
  * use Microsoft Visual Studio and the official Microsoft Platform SDK; or
  * use [http://www.mingw.org/ MinGW], port of GCC and friends to Windows bundled with freely-distributable standard header files and import libraries.

Like Pyrex, both the compiler and the header files are build-time dependencies only. They can safely be removed afterwards.


== Building under Windows ==

While the build procedure itself is the same under Windows as under other systems, the former demands more attention because of the multitude of possible build set-ups. At present, Python extensions can be build in any of the following ways:

 # Under Cygwin
  * *Pros*: offers a full POSIX environment, only free tools needed, almost all dependencies can be installed using the package manager
  * *Cons*: requires Cygwin (for both building and running) of course, MySQL client must be built from the source
 # Natively, with the Microsoft Visual C++ compiler
  * *Pros*: binary packages built this way should work without problems with any official Python release out there (but see below)
  * *Cons*: non-free tools may be needed, different Python versions need different compiler versions, demanding resource-wise, possible licensing issues
 # Natively, with the MinGW compiler
  * *Pros*: only free tools needed, can be used to build for any Python version
  * *Cons*: doesn't quite work with Pygr yet (see below)!

Below you will find notes pertaining to each of these options.

(Note to self: complete this --MS)

Cygwin: usual POSIX build env; for MySQL support, build client from sources

Native Win32: appropriate version of Visual Studio (2.3 - 6, 2.4/2.5 - 2003, 2.6 - 2008), ...