#summary How to set everything up to be able to run megatests.

= Introduction =

The purpose of this page is to provide complete instructions for everyone wishing to run megatests on his/her machine - from obtaining the necessary data to actual running of megatests.

*WARNING: this document is now being rewritten to acommodate recent changes to megatest code. Large parts of it may either still be outdated or conflict with each other.*


= Details =

== Requirements ==

You will need the following to be able to run megatests:

 # A computer system you don't mind placing under heavy load, particularly I/O-wise, on a regular basis. Instructions on this page assume a box running Linux, which so far is the only operating system we have tried running megatests on; Unix(-based) systems should also be supported out of the box, Windows should in principle work but will need either Cygwin or a custom runner script. _Please let us know about the outcome of attempts of running on non-Linux boxes!_

 # A MySQL server with write access to. You'll probably want to use a local, dedicated instance to minimise security implications of the above as well as possible influence of database-access delays on test results;

 # A (relative) lot of disc space. At present megatests take up about 200 GB when idle and up to 600 GB while running;

 # Everything needed by Pygr itself;

 # (optional) A local pygr.Data XML-RPC server, so that the data-download test is not affected by the quality of your connection to the UCLA one.


XXX

== Structure of the directory tree ==

The directory structure for megatest setup is as follows.

 _/result/pygr_megatest_ - parent directory for megatests. All inputs and pre-calculated outputs should be saved here. This includes sub-directories _axt_data_, _maf_data_, _maf_data3_, _maf_test_ and _maf_test3_.

 _/result/pygr_megatest/src_save_ - megatest running directory. Log files and sendmail scripts are saved here.


== Downloading and preparing data ==

The first step here is to obtain appropriate genome sequences and store them as _seqdb.BlastDB_ files. The easiest way of doing this involves using pygr.Data to fetch the relevant BlastDB files over XML-RPC from _biodb2.bioinformatics.ucla.edu_, see the PygrResourceDownloader page for more details on how to do this.

The following sequences must be obtained:

* for dm2 megatests
 * Bio.Seq.Genome.ANOGA.anoGam1
 * Bio.Seq.Genome.APIME.apiMel2
 * Bio.Seq.Genome.DROME.dm2
 * Bio.Seq.Genome.DROPS.dp4
 * Bio.Seq.Genome.DROAN.droAna3
 * Bio.Seq.Genome.DROER.droEre2
 * Bio.Seq.Genome.DROGR.droGri2
 * Bio.Seq.Genome.DROMO.droMoj3
 * Bio.Seq.Genome.DROPE.droPer1
 * Bio.Seq.Genome.DROSE.droSec1
 * Bio.Seq.Genome.DROSI.droSim1
 * Bio.Seq.Genome.DROVI.droVir3
 * Bio.Seq.Genome.DROWI.droWil1
 * Bio.Seq.Genome.DROYA.droYak2
 * Bio.Seq.Genome.TRICA.triCas2


* for hg18 "annotation" and "NLMSA" megatests
 * 'anoCar1', 'bosTau3', 'canFam2', 'cavPor2', 'danRer4', 'dasNov1', 'echTel1', 'equCab1', 'eriEur1', 'felCat3', 'fr2', 'galGal3', 'gasAcu1', 'hg18', 'loxAfr1', 'mm8', 'monDom4', 'ornAna1', 'oryCun1', 'oryLat1', 'otoGar1', 'panTro2', 'rheMac2', 'rn4', 'sorAra1', 'tetNig1', 'tupBel1', 'xenTro2'

* for hg18 "pairwise alignment" megatest
 * 'canFam2', 'hg18', 'mm8', 'panTro2', 'rn4'


At the top of each dm2/hg18 megatest files in tests directory, you can see following lines. You may need to change following lines to _PYGRDATADOWNLOAD_ path. If you want to maintain original *megatest.py* files intact, you may need to create following directories on your megatest machine.

 seqDir = '/result/pygr_megatest/seq_data'

 seqDir = '/result/pygr_megatest/seq_data3'

All the necessary pre-built NLMSA and pre-calculated results are available at http://biodb.bioinformatics.ucla.edu/MEGATEST/

And, there are some sets of pre-build NLMSA. These pre-built NLMSA files should be saved in your machine.

 msaDir = '/result/pygr_megatest/maf_test'  # maf_test.tar in biodb MEGATEST URL.

 msaDir = '/result/pygr_megatest/maf_test3' # maf_test3.tar in biodb MEGATEST URL.

Note that the files _dm2_multiz15way.seqDictP_ from maf_test and _hg18_multiz28way.seqDictP_ from maf_test3 contain hardcoded paths which will need to be changed should your directory structure be different from the one described here. This can be done using an ordinary text editor.

All the test results and NLMSA will be saved subdirectory of _/usr/tmp/deepreds_. You can find _/usr/tmp/deepreds_ path in all of *megatest.py*. You may need to change this directory or create one for megatest.

----

For mutigenome NLMSA megatest, download the archives

 http://biodb.bioinformatics.ucla.edu/MEGATEST/maf_data.tar

 http://biodb.bioinformatics.ucla.edu/MEGATEST/maf_data3.tar

then extract them to the following two directories on your machine, respectively:

 nlmsa_dm2_megatest.py:mafDir = '/result/pygr_megatest/maf_data'

 nlmsa_hg18_megatest.py:mafDir = '/result/pygr_megatest/maf_data3'


For pairwise NLMSA megatest, you need to extract files from

  http://biodb.bioinformatics.ucla.edu/MEGATEST/axt_data.tar

to

 pairwise_hg18_megatest.py:axtDir = '/result/pygr_megatest/axt_data'


The final archive to download is

 http://biodb.bioinformatics.ucla.edu/MEGATEST/input_and_results.tar

On leelab2, all megatest is running /result/pygr_megatest directory. Thus,
input_and_results.tar should be extracted in /result/pygr_megatest directory
or create one for your machine.

input_and_results.tar contains the following files:

 * Annotation_ConservedElement_Exons_chrYh_dm2.txt
 * Annotation_ConservedElement_Exons_chrY_hg18.txt
 * Annotation_ConservedElement_Exons_dm2.txt
 * Annotation_ConservedElement_Exons_hg18.txt
 * Annotation_ConservedElement_Introns_chrYh_dm2.txt
 * Annotation_ConservedElement_Introns_chrY_hg18.txt
 * Annotation_ConservedElement_Introns_dm2.txt
 * Annotation_ConservedElement_Introns_hg18.txt
 * Annotation_ConservedElement_Stop_chrY_hg18.txt
 * Annotation_ConservedElement_Stop_hg18.txt
 * phastConsElements15way_chrYh_dm2.txt
 * phastConsElements15way_dm2.txt
 * phastConsElements28way_chrY_hg18.txt
 * phastConsElements28way_hg18.txt
 * refGene_cdsAnnot_chrY_hg18.txt
 * refGene_cdsAnnot_hg18.txt
 * refGene_exonAnnot_chrYh_dm2.txt
 * refGene_exonAnnot_chrY_hg18.txt
 * refGene_exonAnnot_dm2.txt
 * refGene_exonAnnot_hg18.txt
 * refGene_spliceAnnot_chrYh_dm2.txt
 * refGene_spliceAnnot_chrY_hg18.txt
 * refGene_spliceAnnot_dm2.txt
 * refGene_spliceAnnot_hg18.txt
 * snp126_chrY_hg18.txt
 * snp126_hg18.txt
 * splicesite_dm2_chr4h_multiz15way.txt
 * splicesite_dm2_chr4h.txt
 * splicesite_dm2_multiz15way.txt
 * splicesite_dm2.txt
 * splicesite_hg18_chrY_multiz28way.txt
 * splicesite_hg18_chrY_pairwise5way.txt
 * splicesite_hg18_chrY.txt
 * splicesite_hg18_multiz28way.txt
 * splicesite_hg18_pairwise5way.txt
 * splicesite_hg18.txt

As you can see, there are full versions and _chrY(hg18)_ and _chrYh(dm2)_ versions. Current version of pygr megatest uses only short _(chrY for hg18 and chrYh for dm2)_ versions in order to reduce overhead (both CPU and disc-space). If you want to test full version, you need to change *megatest.py* files, i.e. remove all _chrY_/_chrYh_.

On leelab2 (2.8 GHz dual-core Opteron CPU), the short version of megatests runs for about 5 minutes. On the other hand, the full version takes approximately 30 hours.

Comparison between new results and pre-built result will be done by
md5.digest().


== Setting up the Database ==

Next step is to prepare MySQL database in which all above txt input files are saved. First, you need to make the _.my.cnf_ file in your HOME directory.
{{{
[client]
port=3306
host=your_database_server
user=your_account
password=your_password
}}}
Pygr will automatically try to load ~/.my.cnf to connect MySQL database.

Then create a database named PYGRDB_JAN06. Files created by _mysqldump_ are available at http://biodb.bioinformatics.ucla.edu/MEGATEST/ . You can import all these .sql files by _mysql_ command. MySQL version 5 or higher is recommended for compatability.

Same NLMSA building Megatest will run twice, one for file-saving version and
the other for MySQL version. In each step, text-to-binary conversion test
is included.


== Shell script ==

Pygr megatest-launching shell script (named e.g. _/etc/cron.daily/daily_megatest_) looks like this. Because shell script does not have HOME environmental variable, it may not find path for some user-installed packages, i.e., pyrexc. Thus, you may need to do all pyrexc building steps and others manually in shell script. We need to make shell script intact in order to run this megatest by crontab. Some of the lines in daily_megatest may not be operational. PYTHONPATH should be modified according to your system. You can get pygr from git and compile to see where the compiled pygr is located.

All log files are saved in _/result/pygr_megatest/src_save_.

{{{
#!/bin/sh

HOME=/root
PYTHONPATH=/result/pygr_megatest/src_save/pygr/build/lib.linux-x86_64-2.5
PATH=/usr/kerberos/sbin:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin
export HOME PYTHONPATH PATH
alias pyrexc=/usr/local/bin/pyrexc

date &> /result/pygr_megatest/src_save/tmp1_megatest.log
cd /result/pygr_megatest/src_save
rm -rf pygr
/usr/local/bin/git clone git://repo.or.cz/pygr.git >& /dev/null

cp /result/pygr_megatest/src_save/pygr/pygr/cdict.pyx /result/pygr_megatest/src_save/pygr/pygr/pygr.cdict.pyx
cp /result/pygr_megatest/src_save/pygr/pygr/cdict.pxd /result/pygr_megatest/src_save/pygr/pygr/pygr.cdict.pxd

cp /result/pygr_megatest/src_save/pygr/pygr/cnestedlist.pyx /result/pygr_megatest/src_save/pygr/pygr/pygr.cnestedlist.pyx
cp /result/pygr_megatest/src_save/pygr/pygr/cnestedlist.pxd /result/pygr_megatest/src_save/pygr/pygr/pygr.cnestedlist.pxd

cp /result/pygr_megatest/src_save/pygr/pygr/seqfmt.pyx /result/pygr_megatest/src_save/pygr/pygr/pygr.seqfmt.pyx

/usr/local/bin/pyrexc /result/pygr_megatest/src_save/pygr/pygr/pygr.cdict.pyx
/usr/local/bin/pyrexc /result/pygr_megatest/src_save/pygr/pygr/pygr.cnestedlist.pyx
/usr/local/bin/pyrexc /result/pygr_megatest/src_save/pygr/pygr/pygr.seqfmt.pyx

cp /result/pygr_megatest/src_save/pygr/pygr/pygr.cdict.c /result/pygr_megatest/src_save/pygr/pygr/cdict.c
cp /result/pygr_megatest/src_save/pygr/pygr/pygr.cnestedlist.c /result/pygr_megatest/src_save/pygr/pygr/cnestedlist.c
cp /result/pygr_megatest/src_save/pygr/pygr/pygr.seqfmt.c /result/pygr_megatest/src_save/pygr/pygr/seqfmt.c

cd /result/pygr_megatest/src_save/pygr
/usr/local/bin/python setup.py build >& /result/pygr_megatest/src_save/tmp0_megatest.log
cd /result/pygr_megatest/src_save/pygr/tests
/usr/local/bin/python protest.py >& /result/pygr_megatest/src_save/tmp2_megatest.log
cd /result/pygr_megatest/src_save
/usr/local/bin/python printpath.py >& /result/pygr_megatest/src_save/tmp3_megatest.log
cd /result/pygr_megatest
/usr/local/bin/python /result/pygr_megatest/src_save/pygr/tests/protest.py *megatest.py >& /result/pygr_megatest/src_save/tmp4_megatest.log
cd /result/pygr_megatest/src_save
/usr/local/bin/python send_megatest_email.py
rm -rf pygr
}}}

Finally, the e-mail reporting script _send_megatest_email.py_ looks as follows. _mailtostr_ and _maillist_ specify recipients of reports.


{{{
#!/usr/bin/env python

import sys, os, string, popen2, time, operator

args = sys.argv
if len(args) != 1:
    print 'Usage:', args[0]
    sys.exit()

# receiving mail by default (i.e. on errors)
mailtostr = '''
deepreds@gmail.com
leec@mbi.ucla.edu
marecki@gmail.com
'''

# checking directory
maillist = [ix.strip() for ix in string.split(mailtostr, '\n') if len(ix.strip())]
SENDMAIL = '/usr/sbin/sendmail'

timeStr = time.ctime()
dateStr = ' '.join([ix for ix in timeStr.split(' ') if ':' not in ix])

os.chdir('/result/pygr_megatest/src_save')
sendStr = 'MEGATEST on ' + timeStr + '\n\n' + open('tmp1_megatest.log', 'r').read()
sendStr += open('tmp2_megatest.log', 'r').read()
sendStr += open('tmp3_megatest.log', 'r').read()
sendStr += open('tmp4_megatest.log', 'r').read()

nError = 0
abnormalStop = 0
for lines in sendStr.splitlines():
    if lines[:6] == 'FINAL:':
        nError += int(lines[7:30].split(' ')[0])
        abnormalStop = 1

# receiving mail when no errors occur
if nError == 0 and abnormalStop: maillist = ['deepreds@yahoo.com', 'marecki@gmail.com']

for emailaddress in maillist:
    if emailaddress[0] == '#': continue
    p = os.popen('%s -t' % SENDMAIL, 'w')
    p.write('To: ' + emailaddress + '\n')
    p.write('From: deepreds@leelab2.mbi.ucla.edu\n')
    p.write('Subject: Megatest on ' + dateStr + ' with ' + str(nError) + ' Errors' + '\n')
    p.write('\n\n')
    p.write(sendStr)
    p.close()
}}}